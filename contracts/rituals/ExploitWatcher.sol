// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title ExploitWatcher
/// @notice On-chain sentinel for monitoring suspicious asset movements and triggering ritual alerts
contract ExploitWatcher {
    address public steward;
    uint256 public alertThreshold; // in wei
    mapping(address => bool) public watchedAddresses;
    mapping(address => uint256) public lastTransferAmount;

    event AddressWatched(address indexed addr);
    event SuspiciousTransfer(address indexed from, address indexed to, uint256 amount, uint256 timestamp);
    event StewardUpdated(address newSteward);
    event ThresholdUpdated(uint256 newThreshold);

    modifier onlySteward() {
        require(msg.sender == steward, "Not authorized");
        _;
    }

    constructor(uint256 _alertThreshold) {
        steward = msg.sender;
        alertThreshold = _alertThreshold;
    }

    /// @notice Add an address to the watchlist
    function addWatchedAddress(address addr) external onlySteward {
        watchedAddresses[addr] = true;
        emit AddressWatched(addr);
    }

    /// @notice Update alert threshold
    function updateThreshold(uint256 newThreshold) external onlySteward {
        alertThreshold = newThreshold;
        emit ThresholdUpdated(newThreshold);
    }

    /// @notice Ritual transfer monitor (to be called by external protocols or watchers)
    function reportTransfer(address from, address to, uint256 amount) external {
        lastTransferAmount[to] = amount;

        if (watchedAddresses[from] || watchedAddresses[to]) {
            if (amount >= alertThreshold) {
                emit SuspiciousTransfer(from, to, amount, block.timestamp);
            }
        }
    }

    /// @notice Transfer stewardship
    function transferStewardship(address newSteward) external onlySteward {
        steward = newSteward;
        emit StewardUpdated(newSteward);
    }
}
