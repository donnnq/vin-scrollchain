// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TrustedSoftwareExploitLedgerDAO {
    address public admin;

    struct ExploitEntry {
        string softwareLabel;
        string exploitClause;
        string emotionalTag;
        bool logged;
    }

    ExploitEntry[] public exploits;

    constructor() {
        admin = msg.sender;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not authorized");
        _;
    }

    function submitEntry(string memory _softwareLabel, string memory _exploitClause, string memory _emotionalTag) external onlyAdmin {
        exploits.push(ExploitEntry(_softwareLabel, _exploitClause, _emotionalTag, false));
    }

    function logEntry(uint256 index) external onlyAdmin {
        exploits[index].logged = true;
    }

    function getEntry(uint256 index) external view returns (ExploitEntry memory) {
        return exploits[index];
    }
}
