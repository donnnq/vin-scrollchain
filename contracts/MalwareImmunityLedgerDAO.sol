// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MalwareImmunityLedgerDAO {
    address public admin;

    struct LedgerEntry {
        string threatLabel;
        string immunityClause;
        string emotionalTag;
        bool logged;
    }

    LedgerEntry[] public threats;

    constructor() {
        admin = msg.sender;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not authorized");
        _;
    }

    function submitEntry(string memory _threatLabel, string memory _immunityClause, string memory _emotionalTag) external onlyAdmin {
        threats.push(LedgerEntry(_threatLabel, _immunityClause, _emotionalTag, false));
    }

    function logEntry(uint256 index) external onlyAdmin {
        threats[index].logged = true;
    }

    function getEntry(uint256 index) external view returns (LedgerEntry memory) {
        return threats[index];
    }
}
