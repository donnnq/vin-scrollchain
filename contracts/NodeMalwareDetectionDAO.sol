// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract NodeMalwareDetectionDAO {
    address public originator;

    struct ExploitSignal {
        string malwareName;
        bool usesNodeBundling;
        bool evadesDetection;
        bool stealsCredentials;
        bool isScrollchainSealed;
        uint256 timestamp;
    }

    ExploitSignal[] public exploitLedger;

    constructor() {
        originator = msg.sender;
    }

    function logExploitSignal(
        string memory malwareName,
        bool usesNodeBundling,
        bool evadesDetection,
        bool stealsCredentials,
        bool isScrollchainSealed
    ) external {
        exploitLedger.push(ExploitSignal({
            malwareName: malwareName,
            usesNodeBundling: usesNodeBundling,
            evadesDetection: evadesDetection,
            stealsCredentials: stealsCredentials,
            isScrollchainSealed: isScrollchainSealed,
            timestamp: block.timestamp
        }));
    }
}
