// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SevenZipExploitContainmentProtocolDAO {
    address public admin;

    struct ExploitEntry {
        string version;
        string vulnerabilityType;
        string containmentStrategy;
        string emotionalTag;
        bool patched;
    }

    ExploitEntry[] public protocols;

    constructor() {
        admin = msg.sender;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not authorized");
        _;
    }

    function submitExploit(string memory _version, string memory _vulnerabilityType, string memory _containmentStrategy, string memory _emotionalTag) external onlyAdmin {
        protocols.push(ExploitEntry(_version, _vulnerabilityType, _containmentStrategy, _emotionalTag, false));
    }

    function markPatched(uint256 index) external onlyAdmin {
        protocols[index].patched = true;
    }

    function getExploit(uint256 index) external view returns (ExploitEntry memory) {
        return protocols[index];
    }
}
