// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ToolShellExploitContainmentProtocol {
    address public steward;

    struct ExploitEntry {
        string vulnerabilityID; // "CVE-2025-53770"
        string threatActor; // "Budworm", "Sheathminer", "Storm-2603"
        string targetSector; // "Government", "University", "Telecom"
        string containmentStatus; // "Patched", "Under attack", "Quarantined"
        string emotionalTag;
        bool logged;
        bool sealed;
    }

    ExploitEntry[] public entries;

    constructor() {
        steward = msg.sender;
    }

    modifier onlySteward() {
        require(msg.sender == steward, "Not authorized");
        _;
    }

    function logExploit(string memory vulnerabilityID, string memory threatActor, string memory targetSector, string memory containmentStatus, string memory emotionalTag) external onlySteward {
        entries.push(ExploitEntry(vulnerabilityID, threatActor, targetSector, containmentStatus, emotionalTag, true, false));
    }

    function sealExploitEntry(uint256 index) external onlySteward {
        require(entries[index].logged, "Must be logged first");
        entries[index].sealed = true;
    }

    function getExploitEntry(uint256 index) external view returns (ExploitEntry memory) {
        return entries[index];
    }
}
