// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MalwareContainmentCodex {
    address public admin;

    struct ContainmentEntry {
        string threatName;
        string containmentClause;
        string emotionalTag;
        bool summoned;
        bool neutralized;
        bool sealed;
    }

    ContainmentEntry[] public entries;

    constructor() {
        admin = msg.sender;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not authorized");
        _;
    }

    function summonContainment(string memory threatName, string memory containmentClause, string memory emotionalTag) external onlyAdmin {
        entries.push(ContainmentEntry(threatName, containmentClause, emotionalTag, true, false, false));
    }

    function confirmNeutralization(uint256 index) external onlyAdmin {
        entries[index].neutralized = true;
    }

    function sealContainmentEntry(uint256 index) external onlyAdmin {
        require(entries[index].neutralized, "Must be neutralized first");
        entries[index].sealed = true;
    }

    function getContainmentEntry(uint256 index) external view returns (ContainmentEntry memory) {
        return entries[index];
    }
}
