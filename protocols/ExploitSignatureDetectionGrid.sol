// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ExploitSignatureDetectionGrid {
    address public admin;

    struct DetectionEntry {
        string exploitName; // "CVE-2025-33073"
        string signatureType; // "SMB handshake anomaly", "SYSTEM escalation trace", "Outbound exploit beacon"
        string detectionMethod; // "Firewall log scan", "SIEM alert", "Endpoint telemetry"
        string emotionalTag;
        bool detected;
        bool sealed;
    }

    DetectionEntry[] public entries;

    constructor() {
        admin = msg.sender;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not authorized");
        _;
    }

    function detectSignature(string memory exploitName, string memory signatureType, string memory detectionMethod, string memory emotionalTag) external onlyAdmin {
        entries.push(DetectionEntry(exploitName, signatureType, detectionMethod, emotionalTag, true, false));
    }

    function sealDetectionEntry(uint256 index) external onlyAdmin {
        require(entries[index].detected, "Must be detected first");
        entries[index].sealed = true;
    }

    function getDetectionEntry(uint256 index) external view returns (DetectionEntry memory) {
        return entries[index];
    }
}
